---
layout: doc
title: "Написание постов"
description: "Написание постов в Jekyll. Подключение изображений. Ссылки на посты. Выдержка (post.excerpt) из постов. Подсветка кода."
prism: yes
---
Одной из лучших сторон  Jekyll является его готовность как блог платформы "из коробки". Это значит, что ведение блога уже включено в функционал  Jekyll. Если вы пишите статьи и публикуете их в сети, то вы можете публиковать их и вести блог просто управляя каталогом с текстовыми файлами на вашем компьютере. В сравнении с морокой по настройке и поддержке базы данных обычных CMS это впечатляет.

### Каталог с постами

Как было объяснено в разделе о [структуре каталогов](/documentation/05_directory_structure.html), все ваши записи в блоге располагаются в каталоге `_posts`. Обычно это файлы [Markdown ](http://daringfireball.net/projects/markdown/) или HTML, но это могут быть и другие форматы, если для них установлен конвертер. Во всех постах должна быть [вводная YAML](/documentation/07_frontmatter.html) и все они будут конвертироваться в HTML-страницы, составляющие ваш статический сайт.

#### Создание файлов постов

Для создания нового поста вам нужно создать новый файл в каталоге `_posts`. Важно правильное именование файлов. Jekyll требует именования файлов в следующем формате:

**YEAR-MONTH-DAY-title.MARKUP**


`YEAR` задается в формате из четырех цифр, `MONTH ` и `DAY`  в формате их двух цифр, а `MARKUP` это расширение файла, указывающее на его формат. Вот пример правильно названных файлов:

**2011-12-31-new-years-eve-is-awesome.md**
**2012-09-12-how-to-write-a-blog.textile**


###### Совет: ссылки на другие посты
***Используйте тег [post-url](/documentation/17_templates.html#post-url) для ссылок на другие посты, независимых от изменений стиля постоянных ссылок.***

### Формат контента

Все посты в блоге должны начинаться с [вводной YAML](/documentation/07_frontmatter.html). Дальнейшее содержимое зависит от выбранного вами формата. Jekyll  изначально поддерживает [Markdown](http://daringfireball.net/projects/markdown/) и имеет [множество расширений для других форматов](/documentation/20_plugins.html#converters-1), включая популярный формат [Textile](http://redcloth.org/textile). В этих форматах различается подход к выделению различных типов контента, поэтому к выбору формата надо подходить с учетом своих знаний, навыков и потребностей.

###### Будьте осторожны с наборами символов
***Обработчики контента могут модифицировать определенные символы с целью улучшения их внешнего вида. Например, расширение `smart` для Redcarpet конвертирует стандартные кавычки ASCII в фигурные кавычки Юникода. Для того, чтобы браузер правильно их отображал, задайте кодировку в теге `<head>` с помощью <meta charset="utf-8">.***

### Подключение изображений и ресурсов

Рано или поздно вам понадобиться подключить изображения, вложения или иной нетекстовый контент. Синтаксис для подключения этих ресурсов в `Markdown` и `Textile` различен, проблема в том, где хранить эти файлы.

Благодаря гибкости Jekyll для этой проблемы есть много решений. Наиболее распространенным является создание специального каталога в корне проекта с названием типа `assets` или `downloads`, в который и помещаются ресурсы. Затем они подключаются  из любого поста через путь от корня сайта. Многое зависит от конфигурации домена вашего сайта, для доступа к ресурсам в посте надо использовать переменную `site.url`.

Подключение изображения в посте:

{% raw %}
```markdown
… which is shown in the screenshot below:
![My helpful screenshot]({{ site.url }}/assets/screenshot.jpg)
```
{% endraw %}

Ссылка на PDF:

{% raw %}
```markdown
… you can [get the PDF]({{ site.url }}/assets/mydoc.pdf) directly.
```
{% endraw %}

###### Совет: ссылайтесь, используя URL корня сайта
***Вы можете пропустить переменную {% raw %} {{ site.url }} {% endraw %}, если уверены, что ваш сайт будет просматриваться только через коренной URL. В таком случае вы можете ссылаться на активы непосредственно с `/path/file.jpg`.***

### Вывод индекса постов

Удобно, когда все посты сложены в одном каталоге, но блог полезен тем, что может в нужном месте вывести список постов. Создание индекса постов на отдельной странице (или в [шаблоне](/documentation/17_templates.html)) достаточно просто благодаря  [шаблонизатору Liquid](http://wiki.shopify.com/Liquid) и его тегам. Вот базовый пример создания списка ссылок на записи в блоге:

{% raw %}
```liquid
<ul>
  {% for post in site.posts %}
    <li>
      <a href="{{ post.url }}">{{ post.title }}</a>
    </li>
  {% endfor %}
</ul>
```
{% endraw %}
Конечно, это самый простой образец - у вас есть полный контроль над внешним видом и структурой сайта. Подробнее кастомизация описана в разделе ["как работают шаблоны"](http://jekyllrb.com/docs/templates/).

Запомните, что переменная `post` из примера существует только внутри цикла `for`. Если вам нужен доступ к текущей странице/посту, используйте переменную `page`.

### Выдержка из постов

Из каждого поста  берется блок текста от начала и до первого появления `excerpt_separator`, эта выдержка из поста доступна как `post.excerpt`. С ее помощью мы можем модифицировать  наш предыдущий пример с индексом, добавив первый параграф каждого из постов:

{% raw %}
```liquid
<ul>
  {% for post in site.posts %}
    <li>
      <a href="{{ post.url }}">{{ post.title }}</a>
      {{ post.excerpt }}
    </li>
  {% endfor %}
</ul>
```
{% endraw %}
По умолчанию Jekyll  использует для выдержки из постов первый параграф текста, окруженный тегами `<p>` который для вас автоматически выделит движок Markdown. При желании эти теги можно обрезать:
{% raw %}
```liquid
{{ post.excerpt | remove: '<p>' | remove: '</p>' }}
```
{% endraw %}
Если вас не устраивает автоматическая генерация выдержки, вы можете задать собственную настройку `excerpt` внутри вводной. Также вы можете определить во вводной собственный сепаратор выдержки `excerpt_separator`.

```yaml
---
excerpt_separator: <!--more-->
---

Excerpt
<!--more-->
Out-of-excerpt
```

Полностью отключить выдержку можно задав `excerpt_separator` значение `""`.

Также как и весь остальной контент, сгенерированный Liquid, вы можете обработать выдержку фильтром `| strip_html ` для удаления всех тегов HTML. Это особо полезно если вы хотите вывести выдержку внутри тега `meta="description"` в `head` или в ином месте, где HTML-теги будут лишними.

### Подсветка фрагментов кода

В Jekyll есть встроенная подсветка кода с помощью как Pygments, так и Rouge, подключение фрагментов кода к любому посту делается легко. Просто используйте специальный тег Liquid:

{% raw %}
```ruby
{% highlight ruby %}
def show
  @widget = Widget(params[:id])
  respond_to do |format|
    format.html # show.html.erb
    format.json { render json: @widget }
  end
end
{% endhighlight %}
```
{% endraw %}
Результат будет выглядеть так:

{% highlight ruby %}
```
def show
  @widget = Widget(params[:id])
  respond_to do |format|
    format.html # show.html.erb
    format.json { render json: @widget }
  end
end
```
{% endhighlight %}
###### Совет: отображение номеров строк в коде

***Вы можете вывести нумерацию строк фрагментов кода, добавив ключевое слово `linenos` в открывающий тег {% raw %}`{% highlight ruby linenos %}`{% endraw %}.***

Этих основ достаточно для начала работы с постами. Если вы разберетесь с этим, то вас заинтересуют  [кастомизация постоянных ссылок](/documentation/18_permalinks.html) и [собственные переменные](/documentation/12_variables.html).
